name: Release

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            name: linux-amd64
          - os: linux
            arch: arm64
            name: linux-arm64
          - os: darwin
            arch: amd64
            name: darwin-amd64
          - os: darwin
            arch: arm64
            name: darwin-arm64
          - os: windows
            arch: amd64
            name: windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.25.1"

      - name: Install UPX
        run: |
          wget -q https://github.com/upx/upx/releases/download/v4.2.4/upx-4.2.4-amd64_linux.tar.xz
          tar -xf upx-4.2.4-amd64_linux.tar.xz
          sudo mv upx-4.2.4-amd64_linux/upx /usr/local/bin/
          upx --version

      - name: Build binary
        run: |
          CGO_ENABLED=0 GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build \
            -a \
            -installsuffix cgo \
            -mod=readonly \
            -ldflags="-s -w -X main.version=${{ github.ref_name }} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -trimpath \
            -tags netgo \
            -o gitkit-${{ matrix.name }} \
            main.go

      - name: Compress binary
        run: |
          if [ "${{ matrix.os }}" != "windows" ]; then
            chmod +x gitkit-${{ matrix.name }}
          fi

          # Skip UPX compression for macOS binaries (known issues)
          if [ "${{ matrix.os }}" != "darwin" ]; then
            upx --best --lzma gitkit-${{ matrix.name }}
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gitkit-${{ matrix.name }}
          path: gitkit-${{ matrix.name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          cd artifacts/
          find . -name "gitkit-*" -type f -exec cp {} ../release-assets/ \;
          cd ../release-assets
          ls -la

      - name: Generate changelog
        id: changelog
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")

          # Get commits since last tag
          if git describe --tags >/dev/null 2>&1; then
            CHANGES=$(git log --pretty=format:"* %s (%h)" "${LATEST_TAG}..HEAD" 2>/dev/null || echo "* Initial release")
          else
            CHANGES="* Initial release"
          fi

          # Escape newlines for GitHub output
          CHANGES="${CHANGES//'%'/'%25'}"
          CHANGES="${CHANGES//$'\n'/'%0A'}"
          CHANGES="${CHANGES//$'\r'/'%0D'}"

          echo "changes<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## Changes

            ${{ steps.changelog.outputs.changes }}

            ## Downloads

            Download the appropriate binary for your platform from the assets below.

            **Installation:**
            ```bash
            # Download the binary for your platform
            # Make it executable (Linux/macOS)
            chmod +x gitkit-*
            # Move to your PATH
            sudo mv gitkit-* /usr/local/bin/gitkit
            ```

            **Supported Platforms:**
            - Linux (amd64, arm64)
            - macOS (amd64, arm64)
            - Windows (amd64)
          draft: false
          prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
          files: ./release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
